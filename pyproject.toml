[build-system]
requires = ["setuptools", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "pyqt-openai"
version = "1.8.3"
description = "Python multipurpose chatbot that user can use GPT, other AI models altogether (Release Name: VividNode)"
authors = [{ name = "Jung Gyu Yoon", email = "yjg30737@gmail.com" }]
license = { text = "MIT" }
readme = "README.md"
dependencies = [
    "qtpy",
    "PySide6",
    "pyperclip",
    "jinja2",
    "requests",
    "pyaudio",
    "pillow",
    "psutil",
    "filetype",

    "openai",
    "replicate",

    "llama-index",
    "docx2txt",
    "openpyxl",

    "g4f",
    "nodriver",
    "curl_cffi",
    "litellm",

    "edge-tts",
]
keywords = [
    'openai',
    'pyqt',
    'pyqt5',
    'pyqt6',
    'pyside6',
    'desktop',
    'app',
    'chatbot',
    'gpt',
    'replicate',
    'gemini',
    'claude',
    'llama',
    'llm',
    'gpt4free',
    'litellm',
]

requires-python = "<3.13, >=3.10"
# PySide6 is not available for Python 3.13 yet
# Also below 3.10, Error occurs in Shiboken (which is part of PySide6)
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Libraries",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
    "Topic :: Software Development :: User Interfaces",
]

[project.urls]
homepage = "https://github.com/yjg30737/pyqt-openai.git"

[tool.setuptools]
packages = ["pyqt_openai"]

[project.scripts]
pyqt-openai = "pyqt_openai.main:main"


########################################################
## define only linter configurations below this point ##
########################################################

[tool.pyright.defineConstant]
PYQT5 = false
PYSIDE2 = false
PYQT6 = false
PYSIDE6 = true

[tool.black]
line-length = 175
skip-magic-trailing-comma = false
target-version = ['py38']
include = '\.pyi?$'
exclude = '''
/(
    \.git
| \.hg
| \.github
| \.mypy_cache
| \.tox
| \.venv
| venv
| _build
| buck-out
| build
| __pycache__
| dist
| nuitka_dist
| \.history
| \.idea
| \.chat
| \.ruff_cache
| \.trunk
| .mdx
| .mdl
)/
'''

[tool.pyright]
include = ["*.py"]
exclude = [
    "**/node_modules/**",
    "**/__pycache__/**",
    "**/build/**",
    "**/dist/**",
    "**/venv/**",
    "**/__pycache__/**",
]
reportMissingImports = true
reportMissingTypeStubs = false
pythonVersion = "3.8"
analyzeUnannotatedFunctions = true
deprecateTypingAliases = false

[tool.isort]
atomic = true
profile = "black"
line_length = 175
skip_gitignore = true
multi_line_output = 3

[tool.yapf]
column_limit = 175
ALLOW_SPLIT_BEFORE_DEFAULT_OR_NAMED_ASSIGNS = false
ALLOW_SPLIT_BEFORE_DICT_VALUE = false
DISABLE_SPLIT_LIST_WITH_COMMENT = true
INDENT_DICTIONARY_VALUE = true
join_multiple_lines = false
no_spaces_around_selected_binary_operators = "*,/"
split_before_dict_set_generator = true
split_before_expression_after_opening_paren = false
split_complex_comprehension = true
split_penalty_after_opening_bracket = 50
split_penalty_excess_character = 75                 # Lower penalty for going over the column limit
split_penalty_for_added_line_split = 100            # Discourage adding new line splits

[tool.ruff]
line-length = 175

# Enable preview features.
preview = false

fix = true
force-exclude = true
show-fixes = true
output-format = "grouped" # Group violations by containing file.
respect-gitignore = false

[tool.ruff.lint]
external = ["V"]
task-tags = ["TODO", "FIXME", "HACK"]
exclude = [".venv", ".venv*"]
unfixable = [
    "F841",
    "ERA001",
    "N815",
    "RUF100", # Unused `noqa` directive
    #"UP035",  # replaces deprecated/outdated imports (we want to support older versions of python in the future)
    #"UP038",  # non-pep604-isinstance (python 3.10 syntax)
]
ignore = [
    # The following rules are too strict to be realistically used by ruff:
    "ANN002", # Checks that function *args arguments have type annotations.
    "ANN003", # Checks that function **kwargs arguments have type annotations.
    "ANN101", # Checks that instance method self arguments have type annotations.
    "ANN102", # Checks that class method cls arguments have type annotations.
    "ANN401", # Dynamically typed expressions (typing.Any) are disallowed in {name}
    "ANN204", # Missing return type annotation for special method
    "ARG002", # Unused method argument: `method`
    "COM812", # missing-trailing-comma
    "ERA001", # Found commented out code.
    #    "FBT001",   # Boolean positional arg in function definition
    #    "FBT002",   # Boolean default value in function definition
    "D100", # Missing docstring in public module
    "D101", # Missing docstring in public class
    "D102", # Missing docstring in public method
    "D103", # Missing docstring in public function
    "D104", # Missing docstring in public package
    "D105", # Missing docstring in magic method
    "D107", # Missing docstring in __init__
    "D205", # 1 blank line required between summary line and description
    #    "D213",     # Multi-line docstring summary should start at the second line
    #    "D400",     # First line should end with a period
    "D401", # First line of docstring should be in imperative mood
    "D413", # Missing blank line after last section 'xyz'
    #    "D403",     # First word of the first line should be capitalized: {} -> {}
    #    "D404",     # First word of the docstring should not be "This"
    "D417",    # Missing argument description in the docstring for {definition}: {name}
    "G004",    # Logging statement uses f'' string.
    "N802",    # Function name `screenToWorld` should be lowercase
    "N806",    # Variable `jumpToOffset` in function should be lowercase
    "N815",    # Variable `var` in class scope should not be mixedCase
    "PLR0904", # Too many public methods
    "RET504",  # Unnecessary assignment to `varname` before `return` statement
    "RUF100",  # Unused `noqa` directive (non-enabled: `PLC0415`)
    "T201",    # 'print' detected
    "TD001",   # Invalid TODO tag: `FIXME`
    "TRY003",  # Avoid specifying long messages outside the exception class
    "EM101",   # Exception must not use a string literal, assign to variable first
    "EM102",   # Exception must not use an f-string literal, assign to variable first
    "SIM108",  # Use ternary operator instead of 'if' 'else' block
    "SIM114",  # Combine `if` branches using logical `or` operator
    "S101",    # Use of `assert` detected.

    # The following are currently violated by the codebase.
    #    "D205",     # 1 blank line required between summary line and description
    #    "E402",     # Module level import not at top of file
    #    "FIX004",   # Line contains HACK, consider resolving the issue
    #    "PD901",    # df is a bad variable name. Be kinder to your future self.
    #    "PERF203",  # `try`-`except` within a loop incurs performance overhead
    #    "PLR0913",  # Too many arguments to function call (N > 5)
    #    "PLR2004",  # Magic value used in comparison, consider replacing X with a constant variable
    #    "S101",     # Use of assert detected
    #    "S314",     # Using `xml` to parse untrusted data is known to be vulnerable to XML attacks; use `defusedxml` equivalents
    #    "S605",     # Starting a process with a shell, possible injection detected
    #    "SLF001",   # Private member accessed
    #
    # According to ruff documentation, the following rules should be avoided when using its formatter:
    #
    #    "W191",     # tab-indentation
    #    "E111",     # indentation-with-invalid-multiple
    #    "E114",     # indentation-with-invalid-multiple-comment
    #    "E117",     # over-indented
    #    "D206",     # indent-with-spaces
    #    "D300",     # triple-single-quotes
    #    "Q000",     # bad-quotes-inline-string
    #    "Q001",     # bad-quotes-multiline-string
    #    "Q002",     # bad-quotes-docstring
    #    "Q003",     # avoidable-escaped-quote
    #    "COM812",   # missing-trailing-comma
    #    "COM819",   # prohibited-trailing-comma
    "ISC001",
]

[tool.ruff.lint.per-file-ignores]
"*.pyi" = [
    "I002", # from __future__ import annotations
]
"tests/*.py" = ["ALL"]
".github/*py" = ["INP001"]
"__init__.py" = ["I001", "I002", "TID252", "F401"]

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = false
mark-parentheses = false
parametrize-names-type = "list"
parametrize-values-row-type = "list"
parametrize-values-type = "list"                         # default
raises-require-match-for = ["requests.RequestException"]

[tool.ruff.lint.flake8-annotations]
ignore-fully-untyped = true
mypy-init-return = true
suppress-none-returning = true

[tool.ruff.lint.flake8-bandit]
check-typed-exception = true

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"
inline-quotes = "double"
multiline-quotes = "double"

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all" # Disallow all relative imports.

[tool.ruff.lint.flake8-type-checking]
# Add quotes around type annotations, if doing so would allow an import to be moved into a type-checking block.
quote-annotations = true                         # Does nothing when from __future__ import annotations is used
exempt-modules = ["typing", "typing_extensions"]
strict = true

[tool.ruff.lint.flake8-unused-arguments]
ignore-variadic-names = true

[tool.ruff.lint.isort]
case-sensitive = true
force-wrap-aliases = false
combine-as-imports = true
lines-between-types = 1
required-imports = ["from __future__ import annotations"]

[tool.ruff.format]
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
preview = false

[tool.ruff.lint.pyupgrade]
keep-runtime-typing = false

[tool.mccabe]
max-complexity = 25

[tool.bandit]
exclude_dirs = ["tests"]
tests = ["B201", "B301"]
skips = ["B101", "B601"]

[tool.ruff.lint.pycodestyle]
max-doc-length = 200

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.style]
based_on_style = "google"
split_before_named_assigns = true
split_complex_comprehension = true
split_arguments_when_comma_terminated = true

[tool.pylintrc]
max-line-length = 200

[tool.pytest.ini_options]
log_cli = true
log_cli_level = "CRITICAL"
log_cli_format = "%(message)s"

log_file = "pytest.log"
log_file_level = "DEBUG"
log_file_format = "%(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)"
log_file_date_format = "%Y-%m-%d %H:%M:%S"
